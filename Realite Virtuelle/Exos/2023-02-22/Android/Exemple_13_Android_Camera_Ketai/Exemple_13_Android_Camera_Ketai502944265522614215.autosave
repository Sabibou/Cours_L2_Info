

/****************************************************************************/
/*  MESNARD Emmanuel                                              ISIMA     */
/*                                                                          */
/*        Utilisation d'une des cameras (avec Ketai) sous Android           */
/*  infos supplementaires : http://ketai.org/reference/camera/ketaicamera/  */
/*                                                                          */
/* Exemple_13_Android_Camera_Ketai.pde         Processing 3.5.4 - ANDROID   */
/****************************************************************************/

// Import bibliotheques
import ketai.camera.*;
import jp.nyatla.nyar4psg.*;   // ARToolKit (version 3.0.7)


// Declaration des variables globales
KetaiCamera cam; // Camera
int nbCamera;
Boolean plusieursCamera;
PImage ImageCourante;
MultiMarker sceneMM; // Scene de recherche de "multi-marqueur"

// Fonction d'initialisation de l'application - executee une seule fois
void setup() {
    fullScreen(P2D);
    orientation(LANDSCAPE); // Forcage du mode
    
    //Gestion du mode d'affichage
    imageMode(CENTER); // Mode centre pour garantir que lâ€™image sera visible
    textAlign(CENTER, CENTER);
    textSize(displayDensity * 25); // Parametrage de la police pour etre lisible
    
    //Ouverture du systeme de gestion des cameras a 24 fps 
    cam = new KetaiCamera(this, 1280, 720, 24);
    if (cam != null) {
        nbCamera = cam.getNumberOfCameras();
        plusieursCamera = (nbCamera>1);
    }
    
    sceneMM = new MultiMarker(this,1280, 720,
        "camera_para.dat",
        NyAR4PsgConfig.CONFIG_PSG);
}

void draw() {
    if (cam != null && cam.isStarted()) {
        // La camera fonctionne correctement
        image(cam, width / 2, height / 2, width, height); // restitution en plein ecran, centree
        	sceneMM.detect(cam);   // Recherche du marqueur dans la scene
        
        
        if (sceneMM.isExist(0)) { // Marqueur ISIMA
            // Le marqueur est detecte dans le flux video
            // Changement de repere pour tracer en coordonnees "Marqueur"
            sceneMM.beginTransform(0); // Modification graphique sur marqueur 0
            // trace d'un rectangle 2D : rect(-40,-40,80,80);
            // ...ou mieux, trace d'un cube 3D :
            translate(0, 0, 40); // Placement du cube au dessus du marqueur (et pas a mi-distance)
            box(80,80,80); // Cube de 8 cm de cote
            sceneMM.endTransform();
        }
        
    } else {
        // Elle est eteinte (ou absente...)
    	background(#D16363);
    	text("!!Camera eteinte !!", width / 2, height / 2);
    }
}

void onCameraPreviewEvent() {
    cam.read(); // Lecture d'une image
}

void mousePressed() {
    //Analyse des boutons appuyes
    
    if (mouseY < 100) {
        // On ne regarde quedans le bandeau Haut
        if (cam.isStarted()) {
            cam.stop();
        } else {
            cam.start();
        }
    }
}
